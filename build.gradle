version ''


apply plugin: 'java'
//compileJava.options.encoding = 'UTF-8'
[ compileJava, compileTestJava, javadoc ]*.options*.encoding = 'UTF-8'
sourceCompatibility = 1.8

apply plugin: 'application'

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
   // compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.0'
   compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'
    compile group: 'commons-lang', name: 'commons-lang', version: '2.3'
    compile group: 'com.google.guava',name: 'guava-collections',version: 'r03'
   compile group: 'org.postgresql',name: 'postgresql', version: '9.4-1201-jdbc41'
    compile group: 'com.google.guava', name: 'guava', version: '18.0'
    compile group: 'com.googlecode.clichemaven', name:'cliche',version: '110413'
    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.7.2'
}


task copyDependencies(type: Copy) {
    from configurations.compile
    into 'dependencies'
}


//compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
//compile group: 'commons-codec', name: 'commons-codec', version: '1.10'

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'RhymesClient',
                'Implementation-Version': version,
                'DBExport-Class': 'client.RhymesClient'
    }
    baseName = 'RhymesClient'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}


javadoc {
    options.charSet = 'UTF-8'
    options.encoding = "UTF-8"
    options.docEncoding = "UTF-8"
}
allprojects {

    javadoc {
        options.charSet = 'UTF-8'
        options.encoding = "UTF-8"
        options.docEncoding = "UTF-8"
    }
    configurations {
        umljavadoc
    }
    dependencies {
        umljavadoc 'org.umlgraph:umlgraph:5.6'
    }



    //
    // While javadoc is not typically dependent on compilation, the compile steps
    // sometimes generate some sources that we wish to have in the Javadoc.
    //
    task javadoc(overwrite: true, dependsOn: compileJava) {
        setDescription('Generates Javadoc API documentation with UMLGraph diagrams')
        setGroup(JavaBasePlugin.DOCUMENTATION_GROUP)

        doLast {
            def javaFilePath = file('src/main/java')
            if (javaFilePath.exists()) {
                ant.javadoc(classpath: (configurations.runtime).asPath, // + configurations.provided).asPath,
                        sourcepath: file('src/main/java'),
                        packagenames: '*',
                        destdir: "${docsDir}/javadoc",
                        private: 'true',
                        docletpath: configurations.umljavadoc.asPath) {
                    doclet(name: 'org.umlgraph.doclet.UmlGraphDoc') {
                        param(name: '-inferrel')
                        param(name: '-inferdep')
                        param(name: '-qualify')
                        param(name: '-postfixpackage')
                        param(name: '-hide', value: 'java.*')
                        param(name: '-collpackages', value: 'java.util.*')
                        param(name: '-nodefontsize', value: '9')
                        param(name: '-nodefontpackagesize', value: '7')
                        param(name: '-link', value: 'http://java.sun.com/j2se/1.5.0/docs/guide/javadoc/doclet/spec')
                        param(name: '-link', value: 'http://java.sun.com/j2se/1.5/docs/api')
                    }
                }
            }
        }
    }
}
